<?php

/**
 * Generated by PHPUnit_SkeletonGenerator on 2018-03-06 at 00:19:53.
 */
use PHPUnit\Framework\TestCase;

class UtilsTest extends TestCase {

    /**
     * @var Utils
     */
    protected $object;

    public static function setUpBeforeClass() {

        $_REQUEST['erreurs'] = array(
            'La mise en paiement doit être faite au 20 du mois suivant la saisie par les visiteurs !',
            'Report du frais hors forfait impossible, la fiche de frais du mois suivant a déjà été validé !',
            'Le champ montant doit être numérique',
            'Le champ montant ne peut pas être vide'
        );

        $_REQUEST['succes'] = array(
            'Mise à jour des frais forfaitaires effectuée.',
            'Report du frais hors forfait effectuée.',
            'La fiche de frais est validée.',
            'La fiche de frais est remboursée.'
        );
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new Utils;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * Generated from @assert ('toto', array(array('id'=>'toto'))) == true.
     *
     * @covers Utils::estVisiteur
     */
    public function testEstVisiteur() {
        $this->assertTrue(
                Utils::estVisiteur('toto', array(array('id' => 'toto')))
        );
    }

    /**
     * Generated from @assert ("coco", array(array('id'=>'toto'))) == false.
     *
     * @covers Utils::estVisiteur
     */
    public function testEstVisiteur2() {
        $this->assertFalse(
                Utils::estVisiteur("coco", array(array('id' => 'toto')))
        );
    }

    /**
     * Generated from @assert (2, array(array('id'=>'toto'))) == false.
     *
     * @covers Utils::estVisiteur
     */
    public function testEstVisiteur3() {
        $this->assertFalse(
                Utils::estVisiteur(2, array(array('id' => 'toto')))
        );
    }

    /**
     * Generated from @assert ("toto", array(array('id'=>3))) == false.
     *
     * @covers Utils::estVisiteur
     */
    public function testEstVisiteur4() {
        $this->assertFalse(
                Utils::estVisiteur("toto", array(array('id' => 3)))
        );
    }

    /**
     * Generated from @assert ('2018-02-26') == '26/02/2018'.
     *
     * @covers Utils::dateAnglaisVersFrancais
     */
    public function testDateAnglaisVersFrancais() {
        $this->assertEquals(
                '26/02/2018',
                Utils::dateAnglaisVersFrancais('2018-02-26')
        );
    }

    /**
     * Generated from @assert ('1999-11-09') == '09/11/1999'.
     *
     * @covers Utils::dateAnglaisVersFrancais
     */
    public function testDateAnglaisVersFrancais2() {
        $this->assertEquals(
                '09/11/1999',
                Utils::dateAnglaisVersFrancais('1999-11-09')
        );
    }

    /**
     * Generated from @assert ('1999') == '//1999'.
     *
     * @covers Utils::dateAnglaisVersFrancais
     */
    public function testDateAnglaisVersFrancais3() {
        $this->assertEquals(
                '//1999',
                Utils::dateAnglaisVersFrancais('1999')
        );
    }

    /**
     * Generated from @assert (02) == '//2'.
     *
     * @covers Utils::dateAnglaisVersFrancais
     */
    public function testDateAnglaisVersFrancais4() {
        $this->assertEquals(
                '//2',
                Utils::dateAnglaisVersFrancais(02)
        );
    }

    /**
     * Generated from @assert ('26/02/2018') == '201802'.
     *
     * @covers Utils::getMois
     */
    public function testGetMois() {
        $this->assertEquals(
                '201802',
                Utils::getMois('26/02/2018')
        );
    }

    /**
     * Generated from @assert ('09/11/1999') == '199911'.
     *
     * @covers Utils::getMois
     */
    public function testGetMois2() {
        $this->assertEquals(
                '199911',
                Utils::getMois('09/11/1999')
        );
    }

    /**
     * Generated from @assert ('18/01/2007') == '200612'.
     *
     * @covers Utils::getMoisPrecedent
     */
    public function testGetMoisPrecedent() {
        $this->assertEquals(
                '200612',
                Utils::getMoisPrecedent('18/01/2007')
        );
    }

    /**
     * Generated from @assert ('20/12/2017') == '201711'.
     *
     * @covers Utils::getMoisPrecedent
     */
    public function testGetMoisPrecedent2() {
        $this->assertEquals(
                '201711',
                Utils::getMoisPrecedent('20/12/2017')
        );
    }

    /**
     * Generated from @assert ('200701') == '200702'.
     *
     * @covers Utils::getMoisSuivant
     */
    public function testGetMoisSuivant() {
        $this->assertEquals(
                '200702',
                Utils::getMoisSuivant('200701')
        );
    }

    /**
     * Generated from @assert ('200712') == '200801'.
     *
     * @covers Utils::getMoisSuivant
     */
    public function testGetMoisSuivant2() {
        $this->assertEquals(
                '200801',
                Utils::getMoisSuivant('200712')
        );
    }

    /**
     * Generated from @assert (14.123) == false.
     *
     * @covers Utils::estEntierPositif
     */
    public function testEstEntierPositif() {
        $this->assertFalse(
                Utils::estEntierPositif(14.123)
        );
    }

    /**
     * Generated from @assert (1554) == true.
     *
     * @covers Utils::estEntierPositif
     */
    public function testEstEntierPositif2() {
        $this->assertTrue(
                Utils::estEntierPositif(1554)
        );
    }

    /**
     * Generated from @assert (-5) == false.
     *
     * @covers Utils::estEntierPositif
     */
    public function testEstEntierPositif3() {
        $this->assertFalse(
                Utils::estEntierPositif(-5)
        );
    }

    /**
     * Generated from @assert (-554.544) == false.
     *
     * @covers Utils::estEntierPositif
     */
    public function testEstEntierPositif4() {
        $this->assertFalse(
                Utils::estEntierPositif(-554.544)
        );
    }

    /**
     * Generated from @assert (0) == true.
     *
     * @covers Utils::estEntierPositif
     */
    public function testEstEntierPositif5() {
        $this->assertTrue(
                Utils::estEntierPositif(0)
        );
    }

    /**
     * Generated from @assert (array(0, 4, 2, 486, 5164)) == true.
     *
     * @covers Utils::estTableauEntiers
     */
    public function testEstTableauEntiers() {
        $this->assertTrue(
                Utils::estTableauEntiers(array(0, 4, 2, 486, 5164))
        );
    }

    /**
     * Generated from @assert (array(0, 4, 2, 486, -465)) == false.
     *
     * @covers Utils::estTableauEntiers
     */
    public function testEstTableauEntiers2() {
        $this->assertFalse(
                Utils::estTableauEntiers(array(0, 4, 2, 486, -465))
        );
    }

    /**
     * Generated from @assert (array(875, 4, 3.45, 4, 1221)) == false.
     *
     * @covers Utils::estTableauEntiers
     */
    public function testEstTableauEntiers3() {
        $this->assertFalse(
                Utils::estTableauEntiers(array(875, 4, 3.45, 4, 1221))
        );
    }

    /**
     * Generated from @assert (array(0, 4, 2, -54,87, 154)) == false.
     *
     * @covers Utils::estTableauEntiers
     */
    public function testEstTableauEntiers4() {
        $this->assertFalse(
                Utils::estTableauEntiers(array(0, 4, 2, -54, 87, 154))
        );
    }

    /**
     * Generated from @assert ('18/04/2016', 10, 20) == true.
     *
     * @covers Utils::estJourComprisDansIntervalle
     */
    public function testEstJourComprisDansIntervalle() {
        $this->assertTrue(
                Utils::estJourComprisDansIntervalle('18/04/2016', 10, 20)
        );
    }

    /**
     * Generated from @assert ('14/08/2017', 15, 20) == false.
     *
     * @covers Utils::estJourComprisDansIntervalle
     */
    public function testEstJourComprisDansIntervalle2() {
        $this->assertFalse(
                Utils::estJourComprisDansIntervalle('14/08/2017', 15, 20)
        );
    }

    /**
     * Generated from @assert ('20/12/2015', 10, 20) == true.
     *
     * @covers Utils::estJourComprisDansIntervalle
     */
    public function testEstJourComprisDansIntervalle3() {
        $this->assertTrue(
                Utils::estJourComprisDansIntervalle('20/12/2015', 10, 20)
        );
    }

    /**
     * Generated from @assert ('10/09/2013', 10, 20) == true.
     *
     * @covers Utils::estJourComprisDansIntervalle
     */
    public function testEstJourComprisDansIntervalle4() {
        $this->assertTrue(
                Utils::estJourComprisDansIntervalle('10/09/2013', 10, 20)
        );
    }

    /**
     * Generated from @assert ('21/07/2006', 10, 20) == false.
     *
     * @covers Utils::estJourComprisDansIntervalle
     */
    public function testEstJourComprisDansIntervalle5() {
        $this->assertFalse(
                Utils::estJourComprisDansIntervalle('21/07/2006', 10, 20)
        );
    }

    /**
     * Generated from @assert ('09/06/2011', 10, 20) == false.
     *
     * @covers Utils::estJourComprisDansIntervalle
     */
    public function testEstJourComprisDansIntervalle6() {
        $this->assertFalse(
                Utils::estJourComprisDansIntervalle('09/06/2011', 10, 20)
        );
    }

    /**
     * Generated from @assert ('18/01/2017') == true.
     *
     * @covers Utils::estDateDepassee
     */
    public function testEstDateDepassee() {
        $this->assertTrue(
                Utils::estDateDepassee('18/01/2017')
        );
    }

    /**
     * Generated from @assert ('02/02/2017') == true.
     *
     * @covers Utils::estDateDepassee
     */
    public function testEstDateDepassee2() {
        $this->assertTrue(
                Utils::estDateDepassee('02/02/2017')
        );
    }

    /**
     * Generated from @assert ('30/10/2017') == false.
     *
     * @covers Utils::estDateDepassee
     */
    public function testEstDateDepassee3() {
        $this->assertFalse(
                Utils::estDateDepassee('30/10/2017')
        );
    }

    /**
     * Generated from @assert ('18/12/2018') == false.
     *
     * @covers Utils::estDateDepassee
     */
    public function testEstDateDepassee4() {
        $this->assertFalse(
                Utils::estDateDepassee('18/12/2018')
        );
    }

    /**
     * Generated from @assert ('02/10/2017') == true.
     *
     * @covers Utils::estDateValide
     */
    public function testEstDateValide() {
        $this->assertTrue(
                Utils::estDateValide('02/10/2017')
        );
    }

    /**
     * Generated from @assert ('2/06/2015') == true.
     *
     * @covers Utils::estDateValide
     */
    public function testEstDateValide2() {
        $this->assertTrue(
                Utils::estDateValide('2/06/2015')
        );
    }

    /**
     * Generated from @assert ('30-10-2017') == false.
     *
     * @covers Utils::estDateValide
     */
    public function testEstDateValide3() {
        $this->assertFalse(
                Utils::estDateValide('30-10-2017')
        );
    }

    /**
     * Generated from @assert ('10/4.5/2001') == false.
     *
     * @covers Utils::estDateValide
     */
    public function testEstDateValide4() {
        $this->assertFalse(
                Utils::estDateValide('10/4.5/2001')
        );
    }

    /**
     * Generated from @assert ('20/12/-04') == false.
     *
     * @covers Utils::estDateValide
     */
    public function testEstDateValide5() {
        $this->assertFalse(
                Utils::estDateValide('20/12/-04')
        );
    }

    /**
     * Generated from @assert ('02/08/zeze') == false.
     *
     * @covers Utils::estDateValide
     */
    public function testEstDateValide6() {
        $this->assertFalse(
                Utils::estDateValide('02/08/zeze')
        );
    }

    /**
     * Generated from @assert (array(155, 887, 65, 12, 01)) == true.
     *
     * @covers Utils::lesQteFraisValides
     */
    public function testLesQteFraisValides() {
        $this->assertTrue(
                Utils::lesQteFraisValides(array(155, 887, 65, 12, 01))
        );
    }

    /**
     * Generated from @assert (array('zeze', 887, 65, 12, 01)) == false.
     *
     * @covers Utils::lesQteFraisValides
     */
    public function testLesQteFraisValides2() {
        $this->assertFalse(
                Utils::lesQteFraisValides(array('zeze', 887, 65, 12, 01))
        );
    }

    /**
     * Generated from @assert (array(1, 2, 3.5, 6, 88)) == false.
     *
     * @covers Utils::lesQteFraisValides
     */
    public function testLesQteFraisValides3() {
        $this->assertFalse(
                Utils::lesQteFraisValides(array(1, 2, 3.5, 6, 88))
        );
    }

    /**
     * Generated from @assert (array(-4, 2, 18, 21, 13)) == false.
     *
     * @covers Utils::lesQteFraisValides
     */
    public function testLesQteFraisValides4() {
        $this->assertFalse(
                Utils::lesQteFraisValides(array(-4, 2, 18, 21, 13))
        );
    }

    /**
     * Generated from @assert ('Conaretur sunt in Gallus conaretur conducentia agitare de milites modum futuris in suae Constantius idem itinera sunt de nequo Gallus mortalem agentes in omnes futuris remoti exarsit incertus incertus nequo') == 'REFUSE-Conaretur sunt in Gallus conaretur conducentia agitare de milites modum futuris in suae Const'.
     *
     * @covers Utils::mentionRefuse
     */
    public function testMentionRefuse() {
        $this->assertEquals(
                'REFUSE-Conaretur sunt in Gallus conaretur conducentia agitare de milites modum futuris in suae Const',
                Utils::mentionRefuse('Conaretur sunt in Gallus conaretur conducentia agitare de milites modum futuris in suae Constantius idem itinera sunt de nequo Gallus mortalem agentes in omnes futuris remoti exarsit incertus incertus nequo')
        );
    }

    /**
     * Generated from @assert ('Itaque verae amicitiae difficillime reperiuntur in iis qui in honoribus reque publica') == 'REFUSE-Itaque verae amicitiae difficillime reperiuntur in iis qui in honoribus reque publica'.
     *
     * @covers Utils::mentionRefuse
     */
    public function testMentionRefuse2() {
        $this->assertEquals(
                'REFUSE-Itaque verae amicitiae difficillime reperiuntur in iis qui in honoribus reque publica',
                Utils::mentionRefuse('Itaque verae amicitiae difficillime reperiuntur in iis qui in honoribus reque publica')
        );
    }

    /**
     * Generated from @assert ('On ne change pas une méthode qui marche – ou, en tout cas, qui a marché jusqu’à présent. Telle pourrait être la devise du pouvoir exécutif. Déterminé à engager une réforme en profondeur de la SNCF, il procède comme il l’a fait à l’automne 2017 sur le dossier réputé hautement inflammable du droit du travail,') == 'REFUSE-On ne change pas une méthode qui marche – ou, en tout cas, qui a marché jusqu’à présent. Tell'.
     *
     * @covers Utils::mentionRefuse
     */
    public function testMentionRefuse3() {
        $this->assertEquals(
                'REFUSE-On ne change pas une méthode qui marche – ou, en tout cas, qui a marché jusqu’à présent. Tell',
                Utils::mentionRefuse('On ne change pas une méthode qui marche – ou, en tout cas, qui a marché jusqu’à présent. Telle pourrait être la devise du pouvoir exécutif. Déterminé à engager une réforme en profondeur de la SNCF, il procède comme il l’a fait à l’automne 2017 sur le dossier réputé hautement inflammable du droit du travail,')
        );
    }

    /**
     * @covers Utils::estConnecte
     * @todo   Implement testEstConnecte().
     */
    public function testEstConnecte() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Utils::estComptable
     * @todo   Implement testEstComptable().
     */
    public function testEstComptable() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Utils::connecter
     * @todo   Implement testConnecter().
     */
    public function testConnecter() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Utils::deconnecter
     * @todo   Implement testDeconnecter().
     */
    public function testDeconnecter() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Utils::dateFrancaisVersAnglais
     * @todo   Implement testDateFrancaisVersAnglais().
     */
    public function testDateFrancaisVersAnglais() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Utils::valideInfosFrais
     * @todo   Implement testValideInfosFrais().
     */
    public function testValideInfosFrais() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Utils::ajouterErreur
     * @todo   Implement testAjouterErreur().
     */
    public function testAjouterErreur() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Utils::ajouterSucces
     * @todo   Implement testAjouterSucces().
     */
    public function testAjouterSucces() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers Utils::nbErreurs
     * @todo   Implement testNbErreurs().
     */
    public function testNbErreurs() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

}
